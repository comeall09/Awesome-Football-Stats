import { playerDict } from './../../utils/dict';
import { timeoutMsg } from './../helpers';
import { Scene } from '../scene.class';
import { UclService } from '../../services/ucl/ucl.service';

export class UclScene extends Scene {

    constructor() {
        super('uclScene');
        this.open();
    }

    open(): void {
        this.scene.enter(async (ctx) => {
            await ctx.reply(
                '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:',
                { reply_markup: {
                    inline_keyboard: [
                        [
                            // { text: 'üî• –ü–ª–µ–π-–æ—Ñ—Ñ', callback_data: 'playOff-stage' },
                            // { text: 'üìù –ì—Ä—É–ø–ø–æ–≤–æ–π —ç—Ç–∞–ø', callback_data: 'group-stage' },
                        ],
                        [
                            // { text: 'üìÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏', callback_data: 'matches' },
                            { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'all-stats' },
                        ],
                    ]
                }}
            );
        });

        this.actions();
    }

    actions() {
        const uclService = new UclService();

        this.scene.action('all-stats', async(ctx) => {
            await ctx.answerCbQuery(timeoutMsg);
            const { message_id } = await ctx.reply('–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ...');
            // await uclService.fetchUCLStats();
            await ctx.deleteMessage(message_id);
            await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:', {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: playerDict.Goals, callback_data: 'stats-goals' },
                            { text: playerDict.Assists, callback_data: 'stats-assists' },
                            { text: playerDict['Goals + Assists'], callback_data: 'stats-goals-assists' },
                        ],
                        [
                            { text: playerDict.xG, callback_data: 'stats-xg' },
                            { text: playerDict.xAG, callback_data: 'stats-xAG' },
                        ],
                        [
                            { text: '–ö–ª—é—á–µ–≤—ã–µ –ø–µ—Ä–µ–¥–∞—á–∏', callback_data: 'stats-key-passes' },
                            { text: '% –£—Å–ø–µ—à–Ω—ã—Ö –ø–µ—Ä–µ–¥–∞—á', callback_data: 'stats-pass-completion' },
                        ],
                        [
                            { text: '–ü–µ—Ä–µ–¥–∞—á–∏ –≤ —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ç—Ä–µ—Ç—å', callback_data: 'stats-pass-final-third' },
                            { text: '–°–∫–≤–æ–∑–Ω—ã–µ –ø–µ—Ä–µ–¥–∞—á–∏', callback_data: 'stats-through-ball' },
                        ],
                        [
                            { text: '–ü—Ä–æ–Ω–∏–∫–∞—é—â–∏–µ –ø–µ—Ä–µ–¥–∞—á–∏', callback_data: 'stats-progressive-passes' },
                            { text: '–ü—Ä–æ–Ω–∏–∫–∞—é—â–∏–µ –ø–µ—Ä–µ–¥–∞—á–∏', callback_data: 'stats-progressive-passes' },
                        ]
                    ]
                }
            });
        });
    }

    checkers: undefined;

}